#!/usr/bin/python3

"""
List the upload history of a specific package (and optionally a specific
version). Defaults to retrieving the history from the current development
series. Use --series to specify a historical series.
"""

import os
import sys
import shutil
import logging
import argparse
import datetime as dt
import subprocess as sp
from pathlib import Path
from textwrap import fill
from itertools import groupby
from typing import NamedTuple
from urllib.request import urlopen
from urllib.parse import urlsplit
from email.utils import parseaddr

import distro_info
from colorzero import Color
from debian.deb822 import Deb822
from launchpadlib.launchpad import Launchpad


GREEN = Color('#0f0')
RED = Color('#800')
BROWN = Color('#880')
YELLOW = Color('#ff0')
WHITE = Color('#fff')
ICONS = {
    'new': f'{YELLOW:8}*{YELLOW:0}',
    'unapproved': f'{BROWN:8}?{BROWN:0}',
    'accepted': f'{GREEN:8}✓{GREEN:0}',
    'done': f'•',
    'rejected': f'{RED:8}✗{RED:0}',
}


class Event(NamedTuple):
    timestamp: dt.datetime
    version: str
    icon: str
    subject: str
    action: str
    by: str
    result: str
    comment: str


def main(args=None):
    info = distro_info.UbuntuDistroInfo()
    try:
        devel_series = info.devel()
    except distro_info.DistroDataOutdated:
        # Recent release; just use last supported
        devel_series = info.supported()[-1]

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        'package',
        help="The name of the package to query")
    parser.add_argument(
        'version', nargs='?',
        help="The optional version of the package to query")
    parser.add_argument(
        '-s', '--series', default=devel_series,
        help="Limit results to the specified release, or all supported series "
        "if 'supported' is specified, or every series if 'all' is "
        "specified (default: %(default)s)")
    parser.add_argument(
        '-v', '--verbose', action='store_true',
        help="Produce more output")
    parser.add_argument(
        '--cache-dir', default=Path.home() / '.cache' / 'ubuntu-dev-tools',
        help=argparse.SUPPRESS)
    config = parser.parse_args(args)
    logging.basicConfig(
        stream=sys.stderr, format='%(message)s',
        level=logging.INFO if config.verbose else logging.WARNING)

    try:
        lp = Launchpad.login_anonymously(
            'get-queue', 'production', str(config.cache_dir),
            version='devel')
        ubuntu = lp.distributions['ubuntu']
        logging.info('Found Ubuntu distribution')
        if config.series == 'supported':
            series = [
                serie for serie in
                ubuntu.series_collection
                if serie.status != 'Obsolete'
           ]
        elif config.series == 'all':
            series = list(ubuntu.series_collection)
        else:
            series = [ubuntu.getSeries(name_or_version=config.series)]
        for serie in reversed(series):
            logging.info('Found %s series', config.series)
            uploads = serie.getPackageUploads(
                archive=serie.main_archive, name=config.package,
                version=config.version)
            logging.info('Found %d uploads for %s', len(uploads), config.package)
            events = []
            for event in get_events(lp, uploads, config.package, config.version):
                events.append(event)
                if not len(events) % 10:
                    logging.info('Found %d events', len(events))
            if len(series) > 1 and events:
                print(f'For {serie.fullseriesname} ({serie.version}):')
                print()
            dump_events(events)
    except Exception as err:
        if int(os.environ.get('DEBUG', '0')):
            raise
        else:
            print(str(err), file=sys.stderr)
            return 1

    return 0


def get_events(lp, uploads, package, version):
    for upload in uploads:
        # Filter out uploads with no version (this covers pure translation
        # uploads and other things) and uploads where the package doesn't match
        # (getPackageUploads just searches for prefixes...)
        if upload.package_version is None:
            continue
        if upload.package_name != package:
            continue

        content = {
            (True,  True):  'source+binary',
            (True,  False): 'binary',
            (False, True):  'source',
            (False, False): '???',
        }[(upload.contains_build, upload.contains_source)]
        action = 'copy' if upload.contains_copy else 'upload'
        component = (
            '' if upload.component_name is None else
            f' ({upload.component_name})')
        archs = (
            '' if upload.contains_source and not upload.contains_build else
            f' [{upload.display_arches}]')
        status = (
            upload.logs_collection[0].old_status.lower()
            if upload.logs_collection else
            upload.status.lower()
        )
        if upload.contains_source:
            uploader, sponsor = get_uploaders(lp, upload)
        else:
            uploader = sponsor = ''
        yield Event(
            upload.date_created, upload.package_version, ICONS[status],
            subject=f'{content}{component}{archs}',
            action=f'{action} to {upload.pocket.lower()}',
            by=sponsor, result=status,
            comment=f'changes from {uploader}'
                if uploader and uploader != sponsor else '')
        for log in reversed(upload.logs_collection):
            yield Event(
                log.date_created, upload.package_version,
                ICONS[log.new_status.lower()],
                subject=f'{content}{component}{archs}',
                action=f'{log.new_status.lower()}',
                by=log.reviewer.name,
                result='', comment=log.comment or '')


def get_uploaders(lp, upload):
    if not upload.changes_file_url:
        return None, None
    with urlopen(upload.changes_file_url) as changes:
        for section in Deb822.iter_paragraphs(changes):
            _, uploader_email = parseaddr(section['Changed-By'])
            break
        else:
            return '', ''
    person = lp.people.getByEmail(email=uploader_email)
    if person is None:
        uploader = uploader_email
    else:
        uploader = person.name
    for source_file_url in upload.sourceFileUrls():
        url = urlsplit(source_file_url)
        if url.path.endswith('.dsc'):
            with urlopen(source_file_url) as dsc:
                signed_upload = dsc.read().decode('utf-8')
                break
    else:
        return uploader, ''
    return uploader, get_sponsor(lp, signed_upload)


def get_sponsor(lp, signed_upload):
    # Attempt to verify the signature
    try:
        proc = sp.run(
            ['gpg', '--batch', '--status-fd', '1', '--verify', '-'],
            check=True, capture_output=True, encoding='utf-8', errors='replace',
            input=signed_upload)
    except sp.CalledProcessError as err:
        if err.returncode != 2:
            raise
        # There's a signature, but no embedded public key...
        for line in err.stderr.splitlines():
            if line.startswith('[GNUPG:]'):
                prefix, command, *args = line.split()
                if command == 'NO_PUBKEY':
                    key_id = args[0]
                    break
        else:
            return ''
        # Attempt to grab the key-id from keyserver.ubuntu.com
        proc = sp.run(
            ['gpg', '--keyserver', 'keyserver.ubuntu.com', '--recv-key', key_id],
            check=True)
        # And re-attempt the verification
        proc = sp.run(
            ['gpg', '--batch', '--status-fd', '1', '--verify', '-'],
            check=True, capture_output=True, encoding='utf-8', errors='replace',
            input=signed_upload)

    for line in proc.stdout.splitlines():
        if line.startswith('[GNUPG:]'):
            prefix, command, *args = line.split()
            if command == 'VALIDSIG':
                key_id = args[0]
                break
    else:
        return ''

    # Attempt to convert the email address of the sponsor to a launchpad user
    proc = sp.run(
        ['gpg', '--batch', '--with-colons', '--list-sigs', key_id],
        check=True, capture_output=True, text=True)
    for line in proc.stdout.splitlines():
        command, *args = line.split(':')
        if command == 'uid':
            _, sponsor_email = parseaddr(args[8])
            person = lp.people.getByEmail(email=sponsor_email)
            if person is not None:
                sponsor = person.name
                return sponsor
    else:
        return ''


def dump_events(all_events):
    width, height = shutil.get_terminal_size()
    width = 120 if width > 120 else width

    all_events = sorted(
        all_events, key=lambda ev: (ev.timestamp, ev.version, ev.subject))
    released = False
    for version, events in groupby(all_events, key=lambda ev: ev.version):
        print(f'{GREEN:8}{version}{GREEN:0}')
        for ev in events:
            print(''.join((
                f'{ev.icon} ',
                f'{BROWN:8}{ev.timestamp:%Y-%m-%d %H:%M:%S}{BROWN:0} ',
                ev.subject,
                f' {ev.action}' if ev.action else '',
                f' by {WHITE:8}{ev.by}{WHITE:0}' if ev.by else '',
                f': {ev.result}' if ev.result else '',
            )))
            if ev.comment:
                print(fill(
                    ev.comment, width=width, initial_indent=' ' * 22,
                    subsequent_indent=' ' * 22))
        print()


if __name__ == '__main__':
    sys.exit(main())
