#!/usr/bin/python3

"""
List the upload history of a specific package (and optionally a specific
version). Defaults to retrieving the history from the current development
series. Use --series to specify a historical series.
"""

import os
import sys
import shutil
import logging
import argparse
import datetime as dt
from pathlib import Path
from textwrap import fill
from itertools import groupby
from typing import NamedTuple

import distro_info
from colorzero import Color
from launchpadlib.launchpad import Launchpad


GREEN = Color('#0f0')
RED = Color('#800')
BROWN = Color('#880')
YELLOW = Color('#ff0')
WHITE = Color('#fff')
ICONS = {
    'new': f'{YELLOW:8}*{YELLOW:0}',
    'unapproved': f'{BROWN:8}?{BROWN:0}',
    'accepted': f'{GREEN:8}✓{GREEN:0}',
    'done': f'•',
    'rejected': f'{RED:8}✗{RED:0}',
}


class Event(NamedTuple):
    timestamp: dt.datetime
    version: str
    icon: str
    event: str
    comment: str


def main(args=None):
    info = distro_info.UbuntuDistroInfo()
    try:
        devel_series = info.devel()
    except distro_info.DistroDataOutdated:
        # Recent release; just use last supported
        devel_series = info.supported()[-1]

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        'package',
        help="The name of the package to query")
    parser.add_argument(
        'version', nargs='?',
        help="The optional version of the package to query")
    parser.add_argument(
        '-s', '--series', default=devel_series,
        help="Limit results to the specified release (default: %(default)s)")
    parser.add_argument(
        '-v', '--verbose', action='store_true',
        help="Produce more output")
    parser.add_argument(
        '--cache-dir', default=Path.home() / '.cache' / 'ubuntu-dev-tools',
        help=argparse.SUPPRESS)
    config = parser.parse_args(args)
    logging.basicConfig(
        stream=sys.stderr, format='%(message)s',
        level=logging.INFO if config.verbose else logging.WARNING)

    try:
        lp = Launchpad.login_anonymously(
            'get-queue', 'production', str(config.cache_dir),
            version='devel')
        ubuntu = lp.distributions['ubuntu']
        logging.info('Found Ubuntu distribution')
        series = ubuntu.getSeries(name_or_version=config.series)
        logging.info('Found %s series', config.series)
        uploads = series.getPackageUploads(
            archive=series.main_archive, name=config.package,
            version=config.version)
        logging.info('Found %d uploads for %s', len(uploads), config.package)
        events = []
        for event in get_events(uploads, config.package, config.version):
            events.append(event)
            if not len(events) % 10:
                logging.info('Found %d events', len(events))
        dump_events(events)
    except Exception as err:
        if int(os.environ.get('DEBUG', '0')):
            raise
        else:
            print(str(err), file=sys.stderr)
            return 1

    return 0


def get_events(uploads, package, version):
    for upload in uploads:
        # Filter out uploads with no version (this covers pure translation
        # uploads and other things) and uploads where the package doesn't match
        # (getPackageUploads just searches for prefixes...)
        if upload.package_version is None:
            continue
        if upload.package_name != package:
            continue

        content = {
            (True,  True):  'source+binary',
            (True,  False): 'binary',
            (False, True):  'source',
            (False, False): '???',
        }[(upload.contains_build, upload.contains_source)]
        action = 'copy' if upload.contains_copy else 'upload'
        component = (
            '' if upload.component_name is None else
            f' ({upload.component_name})')
        archs = (
            '' if upload.contains_source and not upload.contains_build else
            f' [{upload.display_arches}]')
        status = (
            upload.logs_collection[0].old_status.lower()
            if upload.logs_collection else
            upload.status.lower()
        )
        yield Event(
            upload.date_created, upload.package_version, ICONS[status],
            f'{content}{component}{archs} {action} to '
            f'{upload.pocket.lower()}: {status}', '')
        for log in reversed(upload.logs_collection):
            yield Event(
                log.date_created, upload.package_version,
                ICONS[log.new_status.lower()],
                f'{content}{component}{archs} {log.new_status.lower()} '
                f'by {WHITE:8}{log.reviewer.name}{WHITE:0}',
                log.comment or '')


def dump_events(all_events):
    width, height = shutil.get_terminal_size()
    width = 120 if width > 120 else width

    all_events = sorted(
        all_events, key=lambda ev: (ev.timestamp, ev.version, ev.event))
    released = False
    for version, events in groupby(all_events, key=lambda ev: ev.version):
        print(f'{GREEN:8}{version}{GREEN:0}')
        for ev in events:
            print(
                f'{ev.icon} {BROWN:8}{ev.timestamp:%Y-%m-%d %H:%M:%S}{BROWN:0} '
                f'{ev.event}')
            if ev.comment:
                print(fill(
                    ev.comment, width=width, initial_indent='    ',
                    subsequent_indent='    '))
        print()


if __name__ == '__main__':
    sys.exit(main())
