#!/usr/bin/python3

import os
import sys
import math
import struct
import signal
import selectors
from pathlib import Path
from itertools import tee, cycle
from collections import deque
from subprocess import run
from threading import Thread, Event

import netifaces
from smbus import SMBus
from dothat import lcd, backlight, touch as nav
from colorzero import Color


RED = Color('#c04000')
GREEN = Color('#00c000')
BLUE = Color('#0000c0')


def pairwise(iterable):
    """
    Return successive overlapping pairs taken from the input *iterable*.

    The number of 2-tuples in the output iterator will be one fewer than the
    number of inputs. It will be empty if the input iterable has fewer than two
    values.
    """
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)


def next_key(item, items):
    """
    Return the subsequent entry in *items* after *item*. If *item* is the last
    entry in *items*, return the first. If *item* does not occur in *items*,
    return :data:`None`.
    """
    if item in items:
        for a, b in pairwise(cycle(items)):
            if item == a:
                return b
    elif items:
        return next(iter(items))
    else:
        return None


def prior_key(item, items):
    """
    Return the prior entry in *items* before *item*. If *item* is the first
    entry in *items*, return the last. If *item* does not occur in *items*,
    return :data:`None`.
    """
    if item in items:
        for a, b in pairwise(cycle(items)):
            if item == b:
                return a
    elif items:
        return next(iter(items))
    else:
        return None


def format_binary_size(size, suffixes=('', 'k', 'M', 'G', 'T', 'P'),
                       zero='0', template='{size:.1f}{suffix}'):
    try:
        index = min(len(suffixes) - 1, int(round(math.log(abs(size), 2) / 10, 2)))
    except ValueError:
        return zero
    else:
        return template.format(size=(size / 2 ** (index * 10)),
                               suffix=suffixes[index])


def status_color(value, steps=32):
    colors = list(RED.gradient(GREEN, steps=steps))
    return colors[max(0, min(steps - 1, int(steps * value)))]


def load_status():
    load = os.getloadavg()
    cpus = os.cpu_count()
    color = (
        GREEN if load[0] < cpus - 1 else
        status_color(1 - (load[0] + 1 - cpus)))
    return color, '/'.join(f'{l:.2f}' for l in load)


def temp_status(path='/sys/class/thermal/thermal_zone0/temp'):
    temp = int(Path(path).read_text()) / 1000
    color = GREEN if temp < 60 else status_color(1 - ((temp - 60) / 25))
    return color, f'{temp:.1f}C'


def mem_status(path='/proc/meminfo'):
    total = free = None
    with Path(path).open('r') as f:
        values = {}
        labels = {'MemTotal:', 'MemAvailable:', 'MemFree:', 'Cached:'}
        for line in f:
            label, value, units = line.split()
            if label in labels:
                values[label] = int(value) * 1024
                if {'MemTotal:', 'MemAvailable:'} <= values.keys():
                    total = values['MemTotal:']
                    free = values['MemAvailable:']
                    break
                elif {'MemTotal:', 'MemFree:', 'Cached:'} <= values.keys():
                    total = values['MemTotal:']
                    free = values['MemFree:'] + values['Cached:']
                    break
    if not total:
        return RED, '???'
    used = total - free
    gb = 1024**3
    color = GREEN if free >= gb else status_color(free / gb)
    return color, f'{format_binary_size(used)}/{format_binary_size(total)}'


def swap_status(path='/proc/meminfo'):
    total = free = None
    with Path(path).open('r') as f:
        values = {}
        labels = {'SwapTotal:', 'SwapFree:'}
        for line in f:
            label, value, units = line.split()
            if label in labels:
                assert units == 'kB'
                values[label] = int(value) * 1024
                if {'SwapTotal:', 'SwapFree:'} == values.keys():
                    total = values['SwapTotal:']
                    free = values['SwapFree:']
                    break
    if not total:
        return RED, '???'
    used = total - free
    gb = 1024**3
    color = GREEN if free >= gb else status_color(free / gb)
    return color, f'{format_binary_size(used)}/{format_binary_size(total)}'


def disk_status(path='/'):
    stat = os.statvfs(path)
    total = stat.f_blocks * stat.f_frsize
    free = stat.f_bfree * stat.f_frsize
    used = total - free
    gb = 1024**3
    color = GREEN if free >= 10*gb else status_color(free / (10*gb))
    return color, f'{format_binary_size(used)}/{format_binary_size(total)}'


def power_status(address=0x36):
    bus = SMBus(1)
    try:
        value = bus.read_word_data(address, 2)
        value, = struct.unpack('<H', struct.pack('>H', value))
    except OSError:
        return RED, '???'
    finally:
        bus.close()
    volts = value * (78.125 / 1_000_000)
    # The capacity from the FuelGauge chip is nonsense (because it's not
    # calibrated for 8P cells), so just estimate it based on the pack voltage
    capacity = 100 * ((volts - 3.2) / 0.96)
    color = GREEN if capacity > 40 else status_color(capacity / 40)
    return color, f'{volts:.1f}V ({capacity:.0f}%)'


def battery_present(address=0x36):
    bus = SMBus(1)
    try:
        chip = bus.read_byte(address)
    except OSError:
        return False
    else:
        return True


class Application:
    """
    Class representing the application, keeping the state of the display and
    providing methods linking the navigation buttons to their actions.

    .. attribute:: iface

        The name of the interface to display.

    .. attribute:: family

        The address family of :attr:`iface` to display; defaults to
        ``netifaces.AF_INET``.
    """
    families = {
        netifaces.AF_INET: 'IP4',
        netifaces.AF_INET6: 'IP6',
        netifaces.AF_LINK: 'MAC',
    }
    controls = {
        'off': 'Power Off',
        'reboot': 'Reboot',
        'tether': 'Tether on',
        'untether': 'Tether off',
    }
    statuses = {
        'load': load_status,
        'temp': temp_status,
        'mem': mem_status,
        'swap': swap_status,
        'disk': disk_status,
    }

    def __init__(self):
        self.iface = next(iter(self.interfaces))
        self.family = next(iter(self.families))
        self.control = next(iter(self.controls))
        self.status = next(iter(self.statuses))
        if battery_present():
            self.statuses['power'] = power_status
        self.color = Color('black')
        self.sweep_thread = None
        self.sweep_event = Event()
        backlight.off()

        @nav.on(nav.UP)
        def handle_up(ch, evt):
            self.iface = prior_key(self.iface, self.interfaces)
            self.refresh()

        @nav.on(nav.DOWN)
        def handle_down(ch, evt):
            self.iface = next_key(self.iface, self.interfaces)
            self.refresh()

        @nav.on(nav.LEFT)
        def handle_left(ch, evt):
            if self.iface == 'status':
                self.status = prior_key(self.status, self.statuses)
            elif self.iface == 'ctrl':
                self.control = prior_key(self.control, self.controls)
            else:
                self.family = prior_key(self.family, self.families)
            self.refresh()

        @nav.on(nav.RIGHT)
        def handle_right(ch, evt):
            if self.iface == 'status':
                self.status = next_key(self.status, self.statuses)
            elif self.iface == 'ctrl':
                self.control = next_key(self.control, self.controls)
            else:
                self.family = next_key(self.family, self.families)
            self.refresh()

        @nav.on(nav.BUTTON)
        def handle_btn(ch, evt):
            if self.iface == 'ctrl':
                run({
                    'off': ['poweroff'],
                    'reboot': ['reboot'],
                    'tether': ['bt-tether', 'start', "Dave's Pixel"],
                    'untether': ['bt-tether', 'stop', "Dave's Pixel"],
                }[self.control])
            else:
                self.refresh()

    def close(self):
        """
        Called to close the application down.
        """
        self.stop_sweep()
        self.sweep(self.color, Color('black'), duration=0.5)
        lcd.clear()
        backlight.off()

    @property
    def interfaces(self):
        """
        Returns a mapping of all interface names to a mapping of all interface
        families to their addresses. For example, the most basic valid result
        would be::

            {'lo': {netifaces.AF_INET: '127.0.0.1'}}

        A more common result might be::

            {'lo': {netifaces.AF_INET: '127.0.0.1',
                    netifaces.AF_INET6: '::1'},
             'eth0': {netifaces.AF_INET: '192.168.0.1'}}
        """
        result = {'status': {}, 'ctrl': {}}
        for name in sorted(netifaces.interfaces()):
            try:
                iface = netifaces.ifaddresses(name)
            except ValueError:
                continue
            for family in self.families:
                for iface_spec in iface.get(family, []):
                    result.setdefault(name, {})[family] = iface_spec.get('addr')
        return result

    def sweep(self, old_color, new_color, duration=1):
        """
        Changes the background color of the display to *new_color* (an instance
        of :class:`~colorzero.Color`) with a nice "sweeping" animation from
        left to right taking *duration* seconds.
        """
        anim = (
            [old_color] * 6 +
            list(old_color.gradient(new_color, steps=math.ceil(duration * 30))) +
            [new_color] * 6
        )
        queue = deque(maxlen=6)
        for item in anim:
            queue.append(item)
            if len(queue) == 6:
                for led, color in enumerate(queue):
                    backlight.single_rgb(
                        (5 - led), *color.rgb_bytes, auto_update=False)
                backlight.update()
            if self.sweep_event.wait(1 / 30):
                break

    def start_sweep(self, old_color, new_color, *, duration=1):
        self.stop_sweep()
        self.sweep_thread = Thread(
            target=self.sweep, args=(old_color, new_color, duration),
            daemon=True)
        self.sweep_event.clear()
        self.sweep_thread.start()

    def stop_sweep(self):
        if self.sweep_thread is not None:
            self.sweep_event.set()
            self.sweep_thread.join(2)
            assert not self.sweep_thread.is_alive()

    def refresh(self):
        """
        Refresh the display to show the current :attr:`iface` and
        :attr:`family`.
        """
        if self.iface == 'status':
            new_color, text = self.statuses[self.status]()
            self._show_text(f'{self.iface}:{self.status}\n{text}')
        elif self.iface == 'ctrl':
            new_color = BLUE
            self._show_text(f'{self.iface}:\n{self.controls[self.control]}')
        else:
            ifaces = self.interfaces
            backlight.set_graph(0)
            try:
                address = ifaces[self.iface][self.family]
                new_color = GREEN
            except KeyError:
                address = 'No address!'
                new_color = RED
            self._show_text(
                f'{self.iface}:{self.families[self.family]}\n{address}')
        if self.color != new_color:
            self.start_sweep(self.color, new_color, duration=0.5)
            self.color = new_color

    def _show_text(self, text):
        lcd.clear()
        for y, line in enumerate(text.splitlines()):
            lcd.set_cursor_position(0, y)
            lcd.write(line.rstrip())


if __name__ == '__main__':
    r, w = os.pipe()
    app = Application()
    def shutdown(signum, frame):
        os.write(w, b'\0')
    signal.signal(signal.SIGINT, shutdown)
    signal.signal(signal.SIGTERM, shutdown)
    selector = selectors.DefaultSelector()
    selector.register(r, selectors.EVENT_READ)
    try:
        while True:
            app.refresh()
            if selector.select(timeout=5):
                break
    finally:
        app.close()
        selector.unregister(r)
        os.close(r)
        os.close(w)
