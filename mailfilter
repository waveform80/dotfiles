#!/usr/bin/python3

"""
A rudimentary mail filtering application. Designed to work with Maildir style
storage, and configurable with a simple INI-style format. Permits filtering
individual mails by boolean expressions against their headers.
"""

from __future__ import annotations

import re
import os
import sys
import ast
import logging
import mailbox
import argparse
import typing as t
import configparser as conf
from pathlib import Path
from collections import abc
from email.utils import parsedate_to_datetime
from types import TracebackType, CodeType
from contextlib import contextmanager, closing
from operator import attrgetter
from itertools import groupby


def main(args: t.Optional[t.Sequence[str]]=None) -> int:
    """
    Main entry-point for the application. Takes the list of *args* passed on
    the command line, and returns the exit code for the application.
    """
    if sys.version_info < (3, 10):
        raise SystemExit('This script requires Python 3.10 or later')

    if int(os.environ.get('TEST', '0')):
        # To run the test-suite (via the built-in doctest module):
        #
        # $ TEST=1 ./mailfilter
        #
        # Optionally, if you have python3-coverage installed, you may track
        # coverage list so:
        #
        # $ TEST=1 python3-coverage run --source=. ./mailfilter
        # $ python3-coverage report --show-missing
        return _test_main()

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        'config', type=argparse.FileType('r'),
        help="The configuration file to execute")
    parser.add_argument(
        '--dry-run', action='store_true',
        help="If specified, run all rules and report matches but do not make "
        "any changes to the mailboxes")
    parser.add_argument(
        '-v', '--verbose', action='store_true',
        help="Produce more console output")
    options = parser.parse_args(args)

    logging.basicConfig(
        stream=sys.stderr, format='%(message)s',
        level=logging.INFO if options.verbose else logging.WARNING)
    config = conf.ConfigParser(
        delimiters=('=',),
        comment_prefixes=('#',),
        interpolation=conf.ExtendedInterpolation())
    config.read_file(options.config)

    rules = get_rules(config)
    sources = get_sources(rules)
    boxes = Boxes()
    matches = get_matches(sources, boxes)

    for source, messages in matches.items():
        logging.info('Matched %d message(s) in %s', len(messages), source)
    run_actions(
        matches, boxes,
        dry_run=options.dry_run, verbose=options.verbose)
    boxes.close()
    return 0


def get_rules(config: conf.ConfigParser) -> t.Sequence[Rule]:
    """
    Given *config*, the parsed input configuration, compile and return the list
    of :class:`Rule` defined. All sections, except "paths" and "DEFAULT" are
    considered potentially valid rules::

        >>> with _test_rig() as test:
        ...     parser = conf.ConfigParser()
        ...     parser.read_string(test['config'])
        ...     rules = get_rules(parser)
        >>> rules
        [<Rule: [move_spam]>]
    """
    return [
        Rule.from_section(section)
        for title, section in config.items()
        if title not in ('paths', conf.DEFAULTSECT)
    ]


def get_sources(rules: t.Sequence[Rule]) -> dict[Path, t.Sequence[Rule]]:
    """
    Given *rules*, the list of :class:`Rule` compiled from the input
    configuration, re-arrange it into a mapping of source folders to the
    list of rules associated with that folder::

        >>> parser = conf.ConfigParser()
        >>> with _test_rig() as test:
        ...     parser.read_string(test['config'])
        ...     sources = get_sources(get_rules(parser))
        >>> sources # doctest: +ELLIPSIS
        {PosixPath('.../INBOX'): [<Rule: [move_spam]>]}

    This permits more efficient scanning as we only iterate over each source
    folder a single time.
    """
    rules = sorted(rules, key=attrgetter('source'))
    return {
        source: list(rules)
        for source, rules in groupby(rules, key=attrgetter('source'))
    }


def get_matches(
    sources: dict[Path, t.Sequence[Rule]],
    boxes: Boxes
) -> dict[Path, dict[str, t.Sequence[Rule]]]:
    """
    Given *sources*, the mapping returned by :func:`get_sources` of source
    folders to :class:`Rule` lists, iterate over each source folder and
    calculate which messages match which rules.

    *boxes* is the mapping of source paths to mailboxes. The result is a
    mapping of source :class:`~pathlib.Path` to a mapping of message key to a
    list of :class:`Rule` that that message matched::

        >>> boxes = Boxes()
        >>> parser = conf.ConfigParser(
        ...     interpolation=conf.ExtendedInterpolation())
        >>> with _test_rig() as test:
        ...     parser.read_string(test['config'])
        ...     assert len(boxes[parser['move_spam']['source']]) == 2
        ...     assert len(boxes[parser['move_spam']['move']]) == 0
        ...     sources = get_sources(get_rules(parser))
        ...     matches = get_matches(sources, boxes)
        ...     assert len(boxes[parser['move_spam']['source']]) == 2
        ...     assert len(boxes[parser['move_spam']['move']]) == 0
        >>> matches # doctest: +ELLIPSIS
        {PosixPath('.../INBOX'): {'...': [<Rule: [move_spam]>]}}
        >>> boxes.close()
    """
    matches = {
        source: {
            key: [rule for rule in source_rules if rule.match(msg)]
            for key, msg in boxes[source].iteritems()
        }
        for source, source_rules in sources.items()
    }
    return {
        source: {
            key: rules
            for key, rules in matches.items()
            if rules
        }
        for source, matches in matches.items()
    }


def run_actions(
    matches: dict[Path, dict[str, t.Sequence[Rule]]],
    boxes: Boxes,
    *, dry_run: bool=False, verbose: bool=False
) -> None:
    """
    Given the *matches* returned by :func:`get_matches`, and the set of
    mail *boxes*, execute the actions dictated by each rule matched.

    This function checks that conflicted actions have not been found before
    attempting to execute actions. If *dry_run* is :data:`True`, then log
    messages will still be produced by actions will not actually run. If
    *verbose* is :data:`True`, more log messages will be produced.

        >>> logging.basicConfig(
        ...     stream=sys.stdout, format='%(message)s', level=logging.INFO,
        ...     force=True)
        >>> boxes = Boxes()
        >>> parser = conf.ConfigParser(
        ...     interpolation=conf.ExtendedInterpolation())
        >>> with _test_rig() as test:
        ...     parser.read_string(test['config'])
        ...     assert len(test['inbox']) == 2
        ...     assert len(test['spam']) == 0
        ...     sources = get_sources(get_rules(parser))
        ...     matches = get_matches(sources, boxes)
        ...     run_actions(matches, boxes, verbose=True)
        ...     assert len(test['inbox']) == 1
        ...     assert len(test['spam']) == 1
        Processing 2012-02-29 12:00:00 Definitely not spam!
        >>> matches # doctest: +ELLIPSIS
        {PosixPath('.../INBOX'): {'...': [<Rule: [move_spam]>]}}
        >>> boxes.close()
    """
    with boxes:
        for source, keys in matches.items():
            for key, matched_rules in keys.items():
                try:
                    if len(matched_rules) > 1:
                        matched_rules = order_conflicts(matched_rules)
                except ConflictError as exc:
                    msg = boxes[source][key]
                    logging.warning('Message matches conflicting rules:')
                    logging.warning('%s', format_message(msg))
                    for rule in exc.rules:
                        logging.warning('%s', rule)
                    continue
                for rule in matched_rules:
                    if verbose:
                        msg = boxes[source][key]
                        logging.info('Processing %s', format_message(msg))
                    if not dry_run:
                        rule.execute(key, boxes)
        if not dry_run:
            boxes.clean()
            boxes.flush()


class Boxes(abc.Mapping[Path, mailbox.Maildir]):
    """
    A trivial class representing a mapping of :class:`pathlib.Path` to
    mailboxes. Constructs :class:`~mailbox.Mailbox` instances on request of
    paths::

        >>> with _test_rig() as test:
        ...     with closing(Boxes()) as boxes:
        ...        assert len(boxes) == 0
        ...        inbox = boxes[test['inbox_path']]
        ...        assert isinstance(inbox, mailbox.Mailbox)
        ...        assert len(boxes) == 1
        ...        assert inbox is boxes[test['inbox_path']]
        ...        list(boxes.keys()) # doctest: +ELLIPSIS
        [PosixPath('.../INBOX')]
    """
    def __init__(self) -> None:
        self._boxes: dict[Path, mailbox.Maildir] = {}

    def close(self) -> None:
        """
        Close all mailboxes and clear the mapping.
        """
        for box in self._boxes.values():
            box.close()
        self._boxes.clear()

    def flush(self) -> None:
        """
        Call :meth:`mailbox.Mailbox.flush` on all mailboxes.
        """
        for box in self._boxes.values():
            box.flush()

    def clean(self) -> None:
        """
        Call :meth:`mailbox.Mailbox.clean` on all mailboxes.
        """
        for box in self._boxes.values():
            box.clean()

    def lock(self) -> None:
        """
        Call :meth:`mailbox.Mailbox.lock` on all mailboxes. Note that the
        mapping may also be used as a context manager to perform locking and
        unlocking.
        """
        for box in self._boxes.values():
            box.lock()

    def unlock(self) -> None:
        """
        Call :meth:`mailbox.Mailbox.unlock` on all mailboxes.
        """
        for box in self._boxes.values():
            box.unlock()

    # Required by mypy --strict
    # pylint: disable=useless-return
    def __enter__(self) -> None:
        self.lock()
        return None

    # Required by mypy --strict
    # pylint: disable=useless-return
    def __exit__(
        self,
        type_: type[BaseException] | None,
        value: BaseException | None,
        tb: TracebackType | None,
    ) -> bool | None:
        self.unlock()
        return None

    def __len__(self) -> int:
        return len(self._boxes)

    def __iter__(self) -> t.Iterator[Path]:
        return iter(self._boxes)

    def __getitem__(self, key: Path) -> mailbox.Maildir:
        try:
            return self._boxes[key]
        except KeyError:
            box = self._boxes[key] = mailbox.Maildir(key, create=False)
            return box


class Rule(t.NamedTuple):
    """
    A named-tuple representing a filter rule.

    .. attribute:: name

        The name of the section that defined the rule. This is purely for
        debugging and reporting purposes.

    .. attribute:: source

        The :class:`~pathlib.Path` of the mailbox the rule applies to.

    .. attribute:: test

        The original string containing the filter's test.

    .. attribute:: code

        A Python code object containing the compiled version of the
        :attr:`test`.

    .. attribute:: move

        The :class:`~pathlib.Path` of the mailbox to move matching message to,
        or :data:`None`.

    .. attribute:: copy

        The :class:`~pathlib.Path` of the mailbox to copy matching message to,
        or :data:`None`.

    .. attribute:: mark

        The set of flags to apply to matching messages

    .. attribute:: unmark

        The set of flags to remove from matching messages
    """
    name: str
    source: Path
    test: str
    code: CodeType
    move: Path | None
    copy: Path | None
    mark: set[str]
    unmark: set[str]

    @classmethod
    def from_section(cls, section: conf.SectionProxy) -> Rule:
        """
        Construct a :class:`Rule` from the provided *section* of a
        configuration file. For example::

            >>> spam = '''\\
            ... [spam]
            ... source = /home/fred/.mail/INBOX
            ... move = /home/fred/.mail/Spam
            ... test = Subject == "YOU'VE WON THE LOTTERY"
            ... '''
            >>> config = conf.ConfigParser()
            >>> config.read_string(spam)
            >>> rule = Rule.from_section(config['spam'])
            >>> rule.source
            PosixPath('/home/fred/.mail/INBOX')
            >>> rule.move
            PosixPath('/home/fred/.mail/Spam')
            >>> rule.test
            'Subject == "YOU\\'VE WON THE LOTTERY"'
        """
        if 'test' in section:
            test = section['test']
            parsed = parse(test)
        else:
            test = 'true'
            parsed = ast.parse('True', '<string>', 'eval')
        code = compile(parsed, '<string>', 'eval')
        return cls(
            name=section.name,
            source=Path(section['source']).expanduser(),
            test=test,
            code=code,
            move=Path(section['move']).expanduser()
                if 'move' in section else None,
            copy=Path(section['copy']).expanduser()
                if 'copy' in section else None,
            mark=set(section['mark'].split(','))
                if 'mark' in section else set(),
            unmark=set(section['unmark'].split(','))
                if 'unmark' in section else set(),
        )

    def __repr__(self) -> str:
        return f'<Rule: [{self.name}]>'

    def match(self, message: mailbox.Message) -> bool:
        """
        Return a :class:`bool` indicating whether the *message* matches the
        rule's test.
        """
        # Yes, it's using eval, but the code is not arbitrary
        # pylint: disable=eval-used
        return bool(eval(self.code, {'msg': message}))

    def execute(self, key: str, boxes: Boxes) -> None:
        """
        Execute the actions of the rule on *message*, given the various mail
        *boxes*.
        """
        # Once compat moves beyond 3.13, use boxes[source].add_flag(key, ...)
        # and only retrieve message in the event move/copy is required
        message = boxes[self.source][key]
        if self.mark:
            message.add_flag(''.join(self.mark))
        if self.unmark:
            message.remove_flag(''.join(self.unmark))
        if self.copy is not None:
            boxes[self.copy].add(message)
        if self.move is not None:
            boxes[self.move].add(message)
            boxes[self.source].discard(key)


def format_message(message: mailbox.Message) -> str:
    """
    Return a short string representing the email *message* containing a
    truncated (if necessary) subject line, and delivery date.
    """
    subj = message['Subject'] or '<No Subject>'
    if len(subj) > 60:
        subj = f'{subj[:30]}…{subj[-30:]}'
    date = parsedate_to_datetime(message['Date'])
    return f'{date:%Y-%m-%d %H:%M:%S} {subj}'


class ConflictError(ValueError):
    """
    A derivative of :exc:`ValueError` raised when a message matches multiple
    rules with conflicting actions, e.g. a move to multiple different folders.
    """
    def __init__(self, msg: str, rules: t.Sequence[Rule]) -> None:
        super().__init__(msg)
        self.rules = rules


def order_conflicts(rules: t.Sequence[Rule]) -> t.Sequence[Rule]:
    """
    Check the list of *rules* (a sequence of :class:`Rule` instances) do not
    conflict with each other, and re-order where necessary.

    For example, a message may be copied to multiple folders, but only moved to
    one. Moves must also come *after* all other actions. In the event rules
    do conflict, raises :exc:`ConflictError`.
    """
    moves = {rule.move for rule in rules if rule.move is not None}
    marks = {mark for rule in rules for mark in rule.mark}
    unmarks = {mark for rule in rules for mark in rule.unmark}
    if len(moves) > 1:
        raise ConflictError(f'Move to {len(moves)} folders', rules)
    if marks & unmarks:
        raise ConflictError(
            f'Mark and unmark the same flags: {",".join(marks & unmarks)}',
            rules)
    return sorted(rules, key=lambda rule: bool(rule.move))


T = t.TypeVar('T')
class Peek(t.Generic[T]):
    """
    A wrapper for an iterator which permits peeking at the top item.
    """
    def __init__(self, it: t.Iterable[T]):
        self._it: t.Iterator[T] = iter(it)
        self._peek: T
        self._peeked: bool = False

    def __iter__(self) -> t.Iterator[T]:
        return self

    def peek(self) -> T:
        """
        Return the next item from the iterator, without (apparently) advancing
        it.
        """
        if not self._peeked:
            self._peek = next(self._it)
            self._peeked = True
        return self._peek

    def __next__(self) -> T:
        if self._peeked:
            self._peeked = False
            return self._peek
        return next(self._it)


class Token(t.NamedTuple):
    """
    Represents a single parsing token.

    .. attribute:: token

        The type of the token. A string in all-caps, e.g. 'EOF', 'COMPOP',
        'VALUE', 'IDENT'.

    .. attribute:: source

        A string containing the source code corresponding to this token.

    .. attribute:: value

        The "value" of the token. For string literals, this is the content
        of the string, for operators, it's the operator string, etc.

    .. attribute:: line

        The 1-based line number at which this token occurs in the original
        source.

    .. attribute:: column

        The 1-based column at which this token occurs in the original source.
    """
    token: str
    source: str
    value: str
    line: int
    column: int

    def __repr__(self) -> str:
        return f'{self.token}: {self.source!r}'


class ParserError(ValueError):
    """
    A derivative of :exc:`ValueError` representing a parsing error. Constructed
    with the parsing error messasge, and the token at which the error was
    encountered.
    """
    def __init__(self, msg: str, token: Token):
        super().__init__(msg)
        self.token = token


def unquote(s: str) -> str:
    """
    Strip the leading and trailing quotation marks from the input string *s*,
    and the backslashes escaping any quotation marks within the string.
    """
    try:
        qchar = s[0]
    except IndexError as exc:
        raise ValueError('empty string literal') from exc
    return s[1:-1].replace('\\' + qchar, qchar)


def tokenize(s: str) -> t.Iterable[Token]:
    """
    Split the input string *s* into a stream of :class:`Token` tuples.
    """
    V = t.TypeVar('V')
    def identity(x: V) -> V:
        return x
    table: list[tuple[str, t.Callable[[str], str], re.Pattern[str]]] = [
        # token    xform     regex
        ('COMPOP', identity, re.compile(r'(==|!=|in)')),
        ('BOOLOP', identity, re.compile(r'(and|or)')),
        ('LPAR',   identity, re.compile(r'\(')),
        ('RPAR',   identity, re.compile(r'\)')),
        ('SEP',    identity, re.compile(r',')),
        ('WS',     identity, re.compile(r'\s+')),
        ('IDENT',  identity, re.compile(r'[A-Za-z][A-Za-z0-9-]*')),
        #('REGEX',  unquote,  re.compile(r'/([^/]|\/)*?/')),
        ('CONST',  unquote,  re.compile(
            r'('
            r'"([^"]|\")*?"'
            r'|'
            r"'([^']|\')*?'"
            r')')),
    ]
    index = 0
    line = column = 1
    while index < len(s):
        for token, value_fn, regex in table:
            match = regex.match(s, pos=index)
            if match is not None:
                break
        else:
            raise ValueError(f'invalid token at {s[index:index + 10]!r}')
        source = s[match.start():match.end()]
        yield Token(token, source, value_fn(source), line, column)
        index += len(source)
        for char in source:
            if char == '\n':
                column = 1
                line += 1
            else:
                column += 1
    # Add an EOF token to simplify EOF handling in the parser
    yield Token('EOF', '', '', line, column)


def parse(s: str) -> ast.Expression:
    """
    Parse the input string *s* into an executable filter expression, returned
    as a Python :class:`~ast.Expression`::

        >>> _dump_ast(parse("(A == 'foo')"))
        Expression(
            body=Compare(
                left=Subscript(
                    value=Name(id='msg', ctx=Load()),
                    slice=Constant(value='A'),
                    ctx=Load()),
                ops=[
                    Eq()],
                comparators=[
                    Constant(value='foo')]))
    """
    tokens = Peek(token for token in tokenize(s) if token.token != 'WS')
    node = _parse_expression(tokens)
    for token in tokens:
        if token.token != 'EOF':
            raise ParserError(f'unexpected {token.source!r}', token)
    ast.fix_missing_locations(node)
    return ast.Expression(body=node)


def _parse_expression(tokens: Peek[Token]) -> ast.AST:
    """
    Parse a boolean expression of one or more comparisons combined with the
    boolean and/or operators. This is the "top" of the parsing tree, and is the
    function called directly from :func:`parse`::

        >>> tokens = tokenize("(A == 'foo') and (B != 'bar')")
        >>> tokens = Peek([t for t in tokens if t.token != 'WS'])
        >>> _dump_ast(_parse_expression(tokens))
        BoolOp(
            op=And(),
            values=[
                Compare(
                    left=Subscript(
                        value=Name(id='msg', ctx=Load()),
                        slice=Constant(value='A'),
                        ctx=Load()),
                    ops=[
                        Eq()],
                    comparators=[
                        Constant(value='foo')]),
                Compare(
                    left=Subscript(
                        value=Name(id='msg', ctx=Load()),
                        slice=Constant(value='B'),
                        ctx=Load()),
                    ops=[
                        NotEq()],
                    comparators=[
                        Constant(value='bar')])])
    """
    # EXPR -> COMP and EXPR
    # EXPR -> COMP or EXPR
    # EXPR -> COMP
    node = _parse_compare(tokens)
    while tokens.peek().token == 'BOOLOP':
        left = node
        op = {'and': ast.And(), 'or': ast.Or()}[next(tokens).value]
        right = _parse_expression(tokens)
        node = ast.BoolOp(values=[left, right], op=op)
    return node


def _parse_compare(tokens: Peek[Token]) -> ast.AST:
    """
    Parse a comparison of two values, or a parenthesized expression from the
    head of the *tokens* sequence, returning a Python :class:`~ast.AST` object
    to execute the comparison in an expression::

        >>> _dump_ast(_parse_compare(Peek(tokenize("A=='foo'"))))
        Compare(
            left=Subscript(
                value=Name(id='msg', ctx=Load()),
                slice=Constant(value='A'),
                ctx=Load()),
            ops=[
                Eq()],
            comparators=[
                Constant(value='foo')])
        >>> _dump_ast(_parse_compare(Peek(tokenize("('foo')"))))
        Constant(value='foo')
    """
    # COMP -> VALUE ==/!= VALUE
    # COMP -> VALUE in SET
    # COMP -> (EXPR)
    if tokens.peek().token == 'LPAR':
        start = next(tokens)
        node = _parse_expression(tokens)
        finish = next(tokens)
        if finish.token != 'RPAR':
            raise ParserError('missing closing ")"', finish)
    else:
        node = _parse_value(tokens)
        if tokens.peek().token == 'COMPOP':
            head = next(tokens)
            left = node
            op = {
                '==': ast.Eq(),
                '!=': ast.NotEq(),
                'in': ast.In(),
            }[head.value]
            if head.value == 'in':
                right = _parse_set(tokens)
            else:
                right = _parse_value(tokens)
            node = ast.Compare(left=left, ops=[op], comparators=[right])
    return node


def _parse_set(tokens: Peek[Token]) -> ast.AST:
    """
    Parse a set of values (a comma-separated, parenthesized sequence of
    string literal constants, or identifiers) from the head of the *tokens*
    sequence, returning a Python :class:`~ast.AST` object to load the value
    of the set into an expression::

        >>> _dump_ast(_parse_set(Peek(tokenize("('foo','bar')"))))
        List(
            elts=[
                Constant(value='foo'),
                Constant(value='bar')],
            ctx=Load())
        >>> _dump_ast(_parse_set(Peek(tokenize("(From,Subject)"))))
        List(
            elts=[
                Subscript(
                    value=Name(id='msg', ctx=Load()),
                    slice=Constant(value='From'),
                    ctx=Load()),
                Subscript(
                    value=Name(id='msg', ctx=Load()),
                    slice=Constant(value='Subject'),
                    ctx=Load())],
            ctx=Load())
    """
    # SET -> (VALUE, VALUE, ...)
    start = next(tokens)
    if start.token != 'LPAR':
        raise ParserError(f'unexpected {start.source!r}; expected "("', start)
    # Empty set not permitted
    node = _parse_value(tokens)
    elements = [node]
    for sep in tokens:
        if sep.token == 'SEP':
            # Permit trailing comma in a set
            if tokens.peek().token == 'RPAR':
                sep = next(tokens)
                break
            elements.append(_parse_value(tokens))
        else:
            break
    else:
        assert False
    if sep.token != 'RPAR':
        raise ParserError('missing closing ")"', sep)
    return ast.List(elts=elements, ctx=ast.Load())


def _parse_value(tokens: Peek[Token]) -> ast.AST:
    """
    Parse a value (a string literal constant, or an identifier) from the head
    of the *tokens* sequence, returning a Python :class:`~ast.AST` object to
    load the value into an expression::

        >>> _dump_ast(_parse_value(Peek(tokenize("'foo'"))))
        Constant(value='foo')
        >>> _dump_ast(_parse_value(Peek(tokenize("Subject"))))
        Subscript(
            value=Name(id='msg', ctx=Load()),
            slice=Constant(value='Subject'),
            ctx=Load())
    """
    # VALUE -> CONST | IDENT
    token = next(tokens)
    if token.token == 'CONST':
        return ast.Constant(value=token.value)
    if token.token == 'IDENT':
        return ast.Subscript(
            value=ast.Name('msg', ctx=ast.Load()),
            slice=ast.Constant(value=token.value),
            ctx=ast.Load())
    raise ParserError(
        f'unexpected {token.source!r}; expected string or header', token)


def _test_main() -> bool:
    """
    Run the test suite via doctest
    """
    # All functions from here on are purely for the benefit of the test suite
    # pylint: disable=import-outside-toplevel, unused-variable
    import doctest

    failures, total = doctest.testmod()
    return bool(failures)


@contextmanager
def _test_rig() -> t.Iterator[dict[str, t.Any]]:
    """
    Generate context for all tests.

    This consists of a temporary directory containing an INBOX with two
    messages, a spam folder with none, and a configuration which will move one
    of the messages to the spam folder when executed. The test rig functions
    as a context manager which will clean up the temporary directory on exit.
    """
    import email
    import email.policy
    import tempfile
    from textwrap import dedent

    with tempfile.TemporaryDirectory() as tmp:
        tmp_path = Path(tmp)
        inbox_path = tmp_path / 'INBOX'
        spam_path = tmp_path / 'spam'
        archive_path = tmp_path / 'archive'
        with (
            closing(mailbox.Maildir(inbox_path, create=True)) as inbox,
            closing(mailbox.Maildir(spam_path, create=True)) as spam,
            closing(mailbox.Maildir(archive_path, create=True)) as archive,
        ):
            template = dedent(
                """\
                From: {sender}
                To: Fred Flintstone <fred@bedrockquarries.com>
                Date: Wed, 29 Feb 2012 12:00:00 GMT
                X-Flag: {flag}
                Subject: {subject}

                Test message
                """)
            test_mails = [
                ('foo@bar.com', 'Definitely not spam!', 'spam'),
                ('Barney Rubble <barney@rubble.me>', 'Bowling tournament', 'ham')
            ]
            for sender, subject, flag in test_mails:
                msg = email.message_from_string(
                    template.format(sender=sender, subject=subject, flag=flag),
                    _class=mailbox.MaildirMessage, policy=email.policy.default)
                inbox.add(msg)
            config = dedent(
                f"""\
                [paths]
                spam = {spam_path}
                archive = {archive_path}

                [move_spam]
                source = {inbox_path}
                test = X-Flag == 'spam'
                move = ${{paths:spam}}
                """)
            config_path = tmp_path / 'filters.conf'
            config_path.write_text(config)
            yield {
                'tmp_path': tmp_path,
                'inbox_path': inbox_path,
                'spam_path': spam_path,
                'archive_path': archive_path,
                'config_path': config_path,
                'inbox': inbox,
                'spam': spam,
                'archive': archive,
                'config': config,
            }


def _dump_ast(node: ast.AST) -> None:
    """
    Pretty-print the given asbtract syntax tree. This function is primarily
    used for debugging and for the test-suite.
    """
    print(ast.dump(node, indent=4))


__test__ = {
    'bad-expressions': """
    Attempt to parse various bad expressions, and ensure ParserError is raised
    appropriately::

        >>> parse('==')
        Traceback (most recent call last):
          File "./mailfilter", line 697, in _parse_value
            raise ParserError(
        ParserError: unexpected '=='; expected string or header
        >>> parse('A in ("foo", "bar" "baz"')
        Traceback (most recent call last):
          File "./mailfilter", line 670, in _parse_set
            raise ParserError('missing closing ")"', sep)
        ParserError: missing closing ")"
        >>> parse('A in "foo", "bar" "baz"')
        Traceback (most recent call last):
          File "./mailfilter", line 654, in _parse_set
            raise ParserError(f'unexpected {start.source!r}; expected "("', start)
        ParserError: unexpected '"foo"'; expected "("
        >>> parse('(A == "foo" "bar")')
        Traceback (most recent call last):
          File "./mailfilter", line 606, in _parse_compare
            raise ParserError('missing closing ")", finish)
        ParserError: missing closing ")"
        >>> parse('A == "foo" "bar"')
        Traceback (most recent call last):
          File "./mailfilter", line 533, in parse
            raise ParserError(f'unexpected {token.source!r}', token)
        ParserError: unexpected '"bar"'
    """,

    'trailing-set-comma': """
    A trailing comma in a parenthesized set is fine::

        >>> _dump_ast(_parse_set(Peek(tokenize("(From,Subject,)"))))
        List(
            elts=[
                Subscript(
                    value=Name(id='msg', ctx=Load()),
                    slice=Constant(value='From'),
                    ctx=Load()),
                Subscript(
                    value=Name(id='msg', ctx=Load()),
                    slice=Constant(value='Subject'),
                    ctx=Load())],
            ctx=Load())
    """,

    'bad-python-version': """
    What happens when Python is too old?
    ::

        >>> from unittest import mock
        >>> with mock.patch('sys.version_info', (3, 5)):
        ...     main()
        Traceback (most recent call last):
          File "./mailfilter", line 34, in main
            raise SystemExit('This script requires Python 3.10 or later')
        SystemExit: This script requires Python 3.10 or later
    """,

    'rule-conflicts': """
    Ensure that conflicting rules, e.g. two rules that both "move" a message,
    are noted and reported::

        >>> logging.basicConfig(
        ...     stream=sys.stdout, format='%(message)s', level=logging.WARNING,
        ...     force=True)
        >>> boxes = Boxes()
        >>> parser = conf.ConfigParser(
        ...     interpolation=conf.ExtendedInterpolation())
        >>> with _test_rig() as test:
        ...     test['config'] += f'''
        ...
        ... [archive]
        ... source = {test['inbox_path']}
        ... move = {test['archive_path']}
        ... '''
        ...     parser.read_string(test['config'])
        ...     assert len(test['inbox']) == 2
        ...     assert len(test['spam']) == 0
        ...     assert len(test['archive']) == 0
        ...     sources = get_sources(get_rules(parser))
        ...     matches = get_matches(sources, boxes)
        ...     run_actions(matches, boxes)
        ...     assert len(test['inbox']) == 1
        ...     assert len(test['spam']) == 0
        ...     assert len(test['archive']) == 1
        Message matches conflicting rules:
        2012-02-29 12:00:00 Definitely not spam!
        <Rule: [move_spam]>
        <Rule: [archive]>
        >>> boxes.close()
    """,

    'copy-before-move': """
    If one rule copies and another moves, that's *not* a conflict, but the
    move must come *after* the copy::

        >>> logging.basicConfig(
        ...     stream=sys.stdout, format='%(message)s', level=logging.WARNING,
        ...     force=True)
        >>> boxes = Boxes()
        >>> parser = conf.ConfigParser(
        ...     interpolation=conf.ExtendedInterpolation())
        >>> with _test_rig() as test:
        ...     test['config'] += f'''
        ...
        ... [archive]
        ... source = {test['inbox_path']}
        ... copy = ${{paths:archive}}
        ... '''
        ...     parser.read_string(test['config'])
        ...     assert len(test['inbox']) == 2
        ...     assert len(test['spam']) == 0
        ...     assert len(test['archive']) == 0
        ...     sources = get_sources(get_rules(parser))
        ...     matches = get_matches(sources, boxes)
        ...     run_actions(matches, boxes)
        ...     assert len(test['inbox']) == 1
        ...     assert len(test['spam']) == 1
        ...     assert len(test['archive']) == 2
        >>> boxes.close()
    """,

    'main --help': """
    Running with --help produces help output on stdout::

        >>> import os
        >>> os.environ['TEST'] = '0' # don't run the test-suite recursively!
        >>> try:
        ...     main(['--help']) # doctest: +ELLIPSIS
        ... except SystemExit:
        ...     pass
        usage: mailfilter [-h] [--dry-run] [-v] config
        ...
    """,

    #'main works': """
    #Running main does what it's supposed to do::

    #    >>> import os
    #    >>> os.environ['TEST'] = '0' # don't run the test-suite recursively!
    #    >>> with _test_rig() as test:
    #    ...     assert len(test['inbox']) == 2
    #    ...     assert len(test['spam']) == 0
    #    ...     args = [str(test['config_path'])]
    #    ...     assert main(args) == 0
    #    ...     assert len(test['inbox']) == 1
    #    ...     assert len(test['spam']) == 1
    #""",
}


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
