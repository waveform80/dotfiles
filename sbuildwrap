#!/usr/bin/python3

"""
A wrapper for sbuild that sets the maintainer according to the d/control file,
and calculates the last released version to correctly include the full
changelog for SRU purposes. If $DEBEMAIL is set in the environment, it is also
passed as the --keyid parameter to sbuild. Only the sbuild parameters that this
script handles are listed below. All others are passed through.
"""

import os
import io
import sys
import shlex
import logging
import argparse
import tempfile
import subprocess as sp
from pathlib import Path
from contextlib import contextmanager
from urllib.parse import urlsplit, urlunsplit

import distro_info
from debian.deb822 import Deb822
from launchpadlib.launchpad import Launchpad


def main(args=None):
    info = distro_info.UbuntuDistroInfo()
    try:
        devel_series = info.devel()
    except distro_info.DistroDataOutdated:
        # Recent release; just use last supported
        devel_series = info.supported()[-1]
    default_arch = sp.run(
        ['dpkg', '--print-architecture'],
        check=True, text=True, capture_output=True).stdout.strip()

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        'source', nargs='?', default=None, type=Path,
        help="The Debian source package (dsc) to build. If not specified, "
        "try and build the unpacked source in the current directory")
    parser.add_argument(
        '-d', '--dist', dest='distribution', default=None,
        help="The distribution series to build for (default: derived from "
        f"debian/changelog header or {devel_series})")
    parser.add_argument(
        '--arch', default=default_arch,
        help=f"The architecture build on and for (default: {default_arch})")
    parser.add_argument(
        '-c', '--chroot', default=None,
        help="Manually specify the chroot to use (default: derived from the "
        "target distribution and specified/default architecture)")
    parser.add_argument(
        '-v', '--verbose', action='store_true',
        help="Output more detail")
    parser.add_argument(
        '--last-version', default=None,
        help="The version from which to build the changelog. If not "
        "specified, queries Launchpad for the last release in the target "
        "distribution")
    parser.add_argument(
        '--git-merge', default=None,
        help="The remote/branch to include tags for git-ubuntu to merge. If "
        "specified, the remote/branch given must match the current HEAD "
        "commit")
    parser.add_argument(
        '--cache-dir', default=Path.home() / '.cache' / 'ubuntu-dev-tools',
        help=argparse.SUPPRESS)

    config, remaining = parser.parse_known_args()
    logging.basicConfig(
        stream=sys.stderr, format='%(message)s',
        level=logging.INFO if config.verbose else logging.WARNING)

    try:
        if 'DEBEMAIL' in os.environ:
            logging.info(
                'Testing signing with DEBEMAIL=%s', os.environ['DEBEMAIL'])
            result = sp.run([
                '/usr/bin/gpg',
                '--batch', '--no-options', '--no-tty',
                '--sign', '--local-user', os.environ['DEBEMAIL'],
            ], input=b'foo\n', stdout=sp.DEVNULL)
            if result.returncode != 0:
                logging.fatal(
                    'Cannot sign result as %s', os.environ["DEBEMAIL"])
                return 1
        else:
            logging.warning('DEBEMAIL is not set')

        with get_source(config.source) as pkg_path:
            logging.info('Parsing d/changelog for source package and version')
            with tempfile.TemporaryFile() as changelog:
                sp.run([
                    'dpkg-parsechangelog',
                    '--file', str(pkg_path / 'debian/changelog')
                ], stdout=changelog, check=True)
                changelog.seek(0)
                for section in Deb822.iter_paragraphs(changelog):
                    config.package = section['Source']
                    config.version = section['Version']
                    if config.distribution is None:
                        config.distribution = section['Distribution']
                    break
            logging.info('Parsing d/control for maintainer')
            with (pkg_path / 'debian/control').open() as control:
                for section in Deb822.iter_paragraphs(control):
                    config.maintainer = section['Maintainer']
                    break

        # Deal with -backports weirdness
        if config.distribution.endswith('-backports'):
            real_distribution = config.distribution[:-len('-backports')]
        else:
            real_distribution = config.distribution
        if not info.valid(real_distribution):
            config.distribution = devel_series
            logging.warning(
                '%s is not a valid Ubuntu release; replaced with %s',
                real_distribution, config.distribution)
            real_distribution = config.distribution

        # Figure out the chroot, if required
        if config.chroot is None:
            config.chroot = f'{real_distribution}-{config.arch}'

        # Figure out the last version, if required
        if config.last_version is None:
            if not config.distribution.endswith('-backports'):
                try:
                    config.last_version = get_last_version(
                        config.package, real_distribution, config.cache_dir)
                except ValueError as exc:
                    config.last_version = None
                    logging.warning(str(exc))

        cmd_line = [
            'sbuild',
            '--maintainer', config.maintainer,
            '--no-clean-source',
            '--dist', config.distribution,
            '--chroot', config.chroot,
        ]
        if config.verbose:
            cmd_line.append('--verbose')
        if 'DEBEMAIL' in os.environ:
            cmd_line.extend(['--keyid', os.environ['DEBEMAIL']])
        if config.last_version:
            cmd_line.extend(['--debbuildopt', f'-v{config.last_version}'])
        if config.git_merge:
            try:
                remote, branch = config.git_merge.split('/')
            except ValueError:
                raise ValueError(
                    f'Expected remote/branch instead of {config.git_merge!r}')
            local_head = get_commit('HEAD')
            remote_head = get_commit(config.git_merge)
            remote_url = get_remote_url(remote)
            if local_head != remote_head:
                raise ValueError(
                    f'Local HEAD commit ({local_head}) does not match '
                    f'specified remote commit {remote}/{branch}')
            cmd_line.extend([
                '--debbuildopt', f'--changes-option=-DVcs-Git-Commit={remote_head}',
                '--debbuildopt', f'--changes-option=-DVcs-Git-Ref=refs/remotes/{branch}',
                '--debbuildopt', f'--changes-option=-DVcs-Git={remote_url}',
            ])
        cmd_line.extend(remaining)
        logging.info('sbuild command-line: %s', shlex.join(cmd_line))
        os.execv('/usr/bin/sbuild', cmd_line)
    except Exception as err:
        if int(os.environ.get('DEBUG', '0')):
            raise
        else:
            logging.fatal(str(err))
            return 1

    return 0


@contextmanager
def get_source(source):
    if source is not None:
        with tempfile.TemporaryDirectory(dir='.') as temp_dir:
            logging.info('Unpacking source in temp dir %s', temp_dir)
            sp.run(
                ['dpkg-source', '--extract', source.resolve()],
                stdout=sp.DEVNULL, stderr=sp.DEVNULL, cwd=temp_dir, check=True)
            for d in Path(temp_dir).iterdir():
                if d.is_dir():
                    yield d
    else:
        yield Path('.')


def get_commit(ref):
    proc = sp.run(
        ['git', 'rev-parse', ref],
        text=True, capture_output=True, check=True)
    return proc.stdout.strip()


def get_remote_url(remote):
    logging.info('Calculating URL for git remote %s', remote)
    proc = sp.run(
        ['git', 'remote', 'get-url', remote],
        text=True, capture_output=True, check=True)
    url = urlsplit(proc.stdout.strip())
    if url.scheme != 'https':
        url = url._replace(scheme='https')
    if url.username or url.password:
        url = url._replace(netloc=url.hostname)
    if url.netloc != 'git.launchpad.net':
        raise ValueError(
            f'Expected remote URL to point to git.launchpad.net but found '
            f'{url.netloc}')
    return urlunsplit(url)


def get_last_version(package, release, cache_dir):
    logging.info(
        'Querying Launchpad for last publication of %s in %s', package, release)
    lp = Launchpad.login_anonymously(
        'get-livefs', 'production', str(cache_dir),
        version='devel')
    ubuntu = lp.distributions['ubuntu']
    archive = ubuntu.getArchive(name='primary')
    series = ubuntu.getSeries(name_or_version=release)
    spph = archive.getPublishedSources(
        distro_series=series,
        source_name=package,
        exact_match=True,
        status='Published')
    for record in spph:
        if record.pocket != 'Proposed':
            return record.source_package_version
    raise ValueError(
        f'Could not determine last published version of {package} in {release}')


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
