#!/bin/bash

set -eu

# shellcheck source=functions.bash
. "$(dirname "$(realpath "$0")")"/functions.bash

root_mount=$(mktemp -d)
boot_mount=$(mktemp -d)
trap 'rmdir $root_mount $boot_mount' EXIT ERR

show_parts() {
    local dev

    info "Partition layout"
    dev="$1"
    fdisk -l "$dev" || true
    echo >&2
}


show_release() {
    local dev root_part

    dev="$1"
    root_part="$(root_partition "$dev")"
    if [ -e "$root_part" ]; then
        if mount "$root_part" "$root_mount"; then
            if [ -r "$root_mount"/etc/os-release ]; then
                info "Content of /etc/os-release"
                cat "$root_mount"/etc/os-release >&2
                echo >&2
            else
                warning "Cannot find /etc/os-release"
            fi
            umount "$root_mount"
        else
            warning "Cannot mount root partition; bad media?"
        fi
    else
        warning "No root partition; blank media?"
    fi
}


umount_parts() {
    local dev

    dev="$1"
    pattern="$(all_partitions "$dev")"

    info "Waiting for other mounts to show up"
    sleep 3
    while grep -q "$pattern" /proc/mounts; do
        grep -o "$pattern" /proc/mounts | while read -r part; do
            info "Unmounting $part"
            umount "$part"
        done
        sleep 3
    done
}


fix_config() {
    local dev boot_part ap password

    dev="$1"
    boot_part="$(boot_partition "$dev")"
    if [ -e "$boot_part" ]; then
        mount "$boot_part" "$boot_mount"
        if [ -e "$boot_mount"/user-data ]; then
            if confirm "Customize cloud-init configuration? [y/n] "; then
                cat << EOF > "$boot_mount"/user-data
#cloud-config

hostname: miss-piggy

chpasswd:
  expire: false
  users:
  - name: ubuntu
    password: raspberry
    type: text

keyboard:
  model: pc105
  layout: gb
  options: ctrl:nocaps

ssh_import_id:
- lp:waveform

apt:
  conf: |
    Acquire::http { Proxy "http://acng.waveform.org.uk:3142"; }

package_update: true
package_upgrade: true
packages:
- avahi-daemon
EOF
            fi
        fi
        if [ -e "$boot_mount"/network-config ]; then
            if confirm "Add wifi configuration? [y/n] "; then
                read -r -p "Access point name: " ap
                read -r -p "Access point password: " password
                cat << EOF >> "$boot_mount"/network-config
wifis:
  wlan0:
    dhcp4: true
    optional: true
    access-points:
      ${ap}:
        password: ${password}
EOF
                # If this is the "netplan conformant" version of network-config
                # we need to indent the additional lines
                if grep -q "^network:" "$boot_mount"/network-config; then
                    sed -i -r -e '/^wifis:/,+6 s/^/  /' "$boot_mount"/network-config
                fi
            fi
            if confirm "Remove ethernet configuration? [y/n] "; then
                sed -i -r \
                    -e '/^ +ethernets:/,+3 s/^/#/' "$boot_mount"/network-config
            fi
        fi
        if [ -e "$boot_mount"/config.txt ]; then
            if ! grep "^disable_overscan=1" "$boot_mount"/config.txt >/dev/null; then
                sed -i \
                    -e '/^#disable_overscan/ s/.*/disable_overscan=1/' \
                    "$boot_mount"/config.txt
            fi
        fi
        umount "$boot_mount"
    else
        warning "No boot partition exists after flash!"
        exit 1
    fi
}


usage() {
    echo "Usage: ${0##*/} image-file-or-archive [device]" >&2
}


main() {
    local image dev

    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        usage
        exit 2
    fi
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        *)
    esac

    if [ $EUID -ne 0 ]; then
        info "Not running as root, re-execing under sudo"
        exec sudo -- "$0" "$@"
    fi

    image=$1
    dev=${2-}

    if [ ! -r "$image" ]; then
        warning "Cannot read $image"
        return 1
    fi

    if [ $# -eq 1 ]; then
        info "Waiting for SD card... "
        dev=$(wait_for_sd)
        echo "Found $dev" >&2
        echo >&2
    else
        echo "Using specified $dev" >&2
    fi

    show_parts "$dev"
    show_release "$dev"

    if confirm "Flash $image to $dev [y/n] "; then
        umount_parts "$dev"
        unpack "$image" | dd of="$dev" bs=16M status=progress
        sync
        show_parts "$dev"
        show_release "$dev"
        fix_config "$dev"
    fi
}


main "$@"
